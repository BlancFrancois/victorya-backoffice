// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v5/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const SurveyPatients = sequelize.define('survey_patients', {
    smoker: {
      type: DataTypes.BOOLEAN,
    },
    height: {
      type: DataTypes.INTEGER,
    },
    weight: {
      type: DataTypes.INTEGER,
    },
    familyDiseases: {
      type: DataTypes.STRING,
    },
    myDiseases: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      defaultValue: Sequelize.literal('{}'),
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    cigNumber: {
      type: DataTypes.STRING,
    },
    bariatricSurgery: {
      type: DataTypes.STRING,
    },
    auraMigraine: {
      type: DataTypes.STRING,
    },
    status: {
      type: DataTypes.STRING,
    },
    drugs: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      defaultValue: Sequelize.literal('{}'),
    },
    myDiseasesSpecifications: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      defaultValue: Sequelize.literal('{}'),
    },
    womenDiseases: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      defaultValue: Sequelize.literal('{}'),
    },
    diabetesDuration: {
      type: DataTypes.INTEGER,
    },
    nbPregnant: {
      type: DataTypes.INTEGER,
    },
    nbAbortion: {
      type: DataTypes.INTEGER,
    },
    deliveryDate: {
      type: DataTypes.DATE,
    },
    menstruationsAbondance: {
      type: DataTypes.INTEGER,
    },
    menstruationsDuration: {
      type: DataTypes.INTEGER,
    },
    age: {
      type: DataTypes.INTEGER,
    },
    migraine: {
      type: DataTypes.STRING,
    },
    acne: {
      type: DataTypes.STRING,
    },
    acneDrug: {
      type: DataTypes.STRING,
    },
    epilepsia: {
      type: DataTypes.STRING,
    },
    drugEpilepsia: {
      type: DataTypes.STRING,
    },
    menstruations: {
      type: DataTypes.STRING,
    },
    abortionTime: {
      type: DataTypes.STRING,
    },
    delivery: {
      type: DataTypes.STRING,
    },
    breastFeeding: {
      type: DataTypes.STRING,
    },
    exclusiveBreastFeeding: {
      type: DataTypes.STRING,
    },
    periodsBack: {
      type: DataTypes.STRING,
    },
    ist: {
      type: DataTypes.STRING,
    },
    latexAllergy: {
      type: DataTypes.STRING,
    },
    immobilisation: {
      type: DataTypes.STRING,
    },
    immoDrugBlood: {
      type: DataTypes.STRING,
    },
    menstruationsPain: {
      type: DataTypes.STRING,
    },
    abortionType: {
      type: DataTypes.STRING,
    },
    menstruationsRegularity: {
      type: DataTypes.STRING,
    },
    menstruationsSpotting: {
      type: DataTypes.STRING,
    },
    epDrugAnticoagulant: {
      type: DataTypes.STRING,
    },
    easyReminder: {
      type: DataTypes.STRING,
    },
    extraUterinPregnancy: {
      type: DataTypes.BOOLEAN,
    },
    diabetePatientComplication: {
      type: DataTypes.BOOLEAN,
    },
    endocarditRisk: {
      type: DataTypes.STRING,
    },
    desires: {
      type: DataTypes.STRING,
    },
    dailyDrugs: {
      type: DataTypes.STRING,
    },
    changeNewContraception: {
      type: DataTypes.STRING,
    },
    currentContraception: {
      type: DataTypes.STRING,
    },
    previousContraception: {
      type: DataTypes.STRING,
    },
    currentContraceptionSatisfaction: {
      type: DataTypes.STRING,
    },
    previousContraceptionSatisfaction: {
      type: DataTypes.STRING,
    },
    contraceptionUnsatisfactionReason: {
      type: DataTypes.STRING,
    },
    changePreviousContraception: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'survey_patients',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v5/reference-guide/relationships#adding-relationships.
  SurveyPatients.associate = (models) => {
  };

  return SurveyPatients;
};
